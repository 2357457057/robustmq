/*
 * Copyright (c) 2023 RobustMQ Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package meta;

service MetaService {
  // Save or update data in Meta Server
  rpc set(SetRequest) returns(SetReply){}

  // Get data in Meta Server
  rpc get(GetRequest) returns(GetReply){}

  // Check whether data exists in the Meta Server
  rpc exists(ExistsRequest) returns(ExistsReply){}

  // Delete data from Meta Server
  rpc delete(DeleteRequest) returns(DeleteReply){}

  // Broker node reports a heartbeat, notifying Meta Server that the node is alive
  rpc heartbeat(HeartbeatRequest) returns(HeartbeatReply){}

  // Raft messages are sent between nodes
  rpc SendRaftMessage(SendRaftMessageRequest) returns(SendRaftMessageReply) {}

  // Send ConfChange messages to Raft with other nodes
  rpc SendRaftConfChange(SendRaftConfChangeRequest) returns(SendRaftConfChangeReply){}
}

message SetRequest{
  string key = 1;
  bytes  data = 2;
}

message SetReply{
}

message GetRequest{
  string key = 1;
}

message GetReply{
  bytes  data = 1;
}

message ExistsRequest{
  string key = 1;
}

message ExistsReply{
  bool exist = 1;
}

message DeleteRequest{
  string key = 1;
}

message DeleteReply{
}

message HeartbeatRequest{
  string key = 1;
}

message HeartbeatReply{

}

message SendRaftMessageRequest{
    bytes message = 1;
}

message SendRaftMessageReply{

}

message SendRaftConfChangeRequest{
    bytes message = 1;
}

message SendRaftConfChangeReply{
}