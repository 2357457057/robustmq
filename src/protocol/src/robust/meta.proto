/*
 * Copyright (c) 2023 RobustMQ Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package meta;

service MetaService {
  
  // Obtain information about the Leader node in the cluster
  rpc FindLeader (FindLeaderRequest) returns (FindLeaderReply) {}

  // Initiates a vote election request to other nodes in the cluster  
  rpc Vote(VoteRequest) returns (VoteReply){}

  // Leader node notifies itself of being elected as the Leader
  rpc TransformLeader(TransformLeaderRequest) returns (TransformLeaderReply) {}

  // Leader node sends a heartbeat message to a Follower node
  rpc Heartbeat(HeartbeatRequest) returns(HeartbeatReply){}

  rpc BrokerRegister(BrokerRegisterRequest) returns(BrokerRegisterReply){}

  // 
  rpc BrokerUnRegister(BrokerUnRegisterRequest) returns(BrokerUnRegisterReply){}
}


message FindLeaderRequest{

}

message FindLeaderReply{
  uint64 LeaderId = 1;
  string LeaderIp = 2;
}

message VoteRequest {
  uint64 node_id = 1;
}

message VoteReply {
  uint64 vote_node_id = 1;
}

message HeartbeatRequest{
  uint64 node_id = 1;
}

message HeartbeatReply{

}

message TransformLeaderRequest {
  uint64 node_id = 1;
  string node_ip = 2;
}

message TransformLeaderReply {
  bool vote_node_id = 1;
}

message BrokerRegisterRequest{
  uint64 node_id = 1;
}

message BrokerRegisterReply{

}

message BrokerUnRegisterRequest{
  uint64 node_id = 1;
}

message BrokerUnRegisterReply{

}
