/*
 * Copyright (c) 2023 RobustMQ Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package placement;

enum ClusterType{
    BrokerServer = 0;
    StorageEngine = 1;
    PlacementCenter = 2;
}

service PlacementCenterService {
  
  //
  rpc RegisterNode(RegisterNodeRequest) returns(CommonReply){}

  //
  rpc UnRegister_node(UnRegisterNodeRequest) returns(CommonReply){}

  //
  rpc CreateShard(CreateShardRequest) returns(CommonReply){}
 
  //
  rpc GetShard(GetShardRequest) returns(GetShardReply){}

  //
  rpc DeleteShard(DeleteShardRequest) returns(CommonReply){}

  //
  rpc CreateSegment(CreateSegmentRequest) returns(CommonReply){}

  // 
  rpc DeleteSegment(DeleteSegmentRequest) returns(CommonReply){}

  // Broker node reports a heartbeat, notifying Meta Server that the node is alive
  rpc heartbeat(HeartbeatRequest) returns(CommonReply){}

  rpc ReportMonitor(ReportMonitorRequest) returns(CommonReply){}

  // Raft messages are sent between nodes
  rpc SendRaftMessage(SendRaftMessageRequest) returns(SendRaftMessageReply) {}

  // Send ConfChange messages to Raft with other nodes
  rpc SendRaftConfChange(SendRaftConfChangeRequest) returns(SendRaftConfChangeReply){}

  // 
  rpc RaftTransferLeader(RaftTransferLeaderRequest) returns(CommonReply) {}

  // 
  rpc GenerateUniqueNodeId(GenerateUniqueNodeIdRequest) returns(GenerateUniqueNodeIdReply) {}

  //
  rpc set(SetRequest) returns(CommonReply){}

  // 
  rpc delete(DeleteRequest) returns(CommonReply){}

  // 
  rpc get(GetRequest) returns(GetReply){}

  // 
  rpc exists(ExistsRequest) returns(ExistsReply){} 
}

message CommonReply{
    
}

message HeartbeatRequest{
    ClusterType cluster_type = 1;
    string cluster_name = 2;
    uint64 node_id = 4;
}

message SendRaftMessageRequest{
    bytes message = 1;
}

message SendRaftMessageReply{

}

message SendRaftConfChangeRequest{
    bytes message = 1;
}

message SendRaftConfChangeReply{
}

message RaftTransferLeaderRequest{
    uint64 node_id = 1;
}

message RegisterNodeRequest{
    ClusterType cluster_type = 1;
    string cluster_name = 2;
    string node_ip = 3;
    uint64 node_id = 4;
    uint32 node_port = 5;
    string extend_info = 6;
}

message UnRegisterNodeRequest{
    ClusterType cluster_type = 1;
    string cluster_name = 2;
    uint64 node_id = 3;
}

message CreateShardRequest{
    string cluster_name = 1;
    string shard_name = 2;
    uint32 replica = 3;
}

message GetShardRequest{
    string cluster_name = 1;
    string shard_name = 2;
}

message GetShardReply{
    string cluster_name = 1;
    string shard_id = 2;
    string shard_name = 3;
    uint32 replica = 4;
    bytes replicas = 5;
    string status=6;
}

message DeleteShardRequest{
    string cluster_name = 1;
    string shard_name = 2;
}

message CreateSegmentRequest{
    string cluster_name = 1;
    string shard_name = 2;
}

message DeleteSegmentRequest{
    string cluster_name = 1;
    string shard_name = 2;
    uint64 segment_seq = 3;
}

message ReportMonitorRequest{
    string cluster_name = 1;
    uint64 node_id = 2;
    float cpu_rate = 3;
    float memory_rate = 4;
    float disk_rate = 5;
    float network_rate = 6;
}

message GenerateUniqueNodeIdRequest{
    
}

message GenerateUniqueNodeIdReply{
    uint64 node_id = 1;
}

message SetRequest{
    string key = 1;
    string value = 2;
}

message GetRequest{
    string key = 1;
}

message GetReply{
    string value = 1;
}

message DeleteRequest{
    string value = 1;
}

message ExistsRequest{
    string key = 1;
}

message ExistsReply{
    bool flag = 1;
}